/*
    PDFObject v2.2.8
    https://github.com/pipwerks/PDFObject
    @license
    Copyright (c) 2008-2022 Philip Hutchison
    MIT-style license: http://pipwerks.mit-license.org/
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
!function (root, factory) { "function" == typeof define && define.amd ? define([], factory) : "object" == typeof module && module.exports ? module.exports = factory() : root.PDFObject = factory() }(this, function () { "use strict"; if (typeof window !== "object" || typeof window.navigator !== "object" || !window.navigator.userAgent || (!window.navigator.mimeTypes || !window.navigator.mimeTypes.length) && !window.navigator.plugins) return !1; let nav = window.navigator, ua = window.navigator.userAgent, isIE = "ActiveXObject" in window, isModernBrowser = typeof window.Promise !== "undefined", supportsPdfMimeType = (nav.mimeTypes ? nav.mimeTypes["application/pdf"] !== undefined : !1), supportsPdfActiveX = !1, supportsPDFs = supportsPdfMimeType || isIE && supportsPdfActiveX || isModernBrowser, embedError = null, createAXO, buildFragmentString, log, embedPDF, pdfobjectversion = "2.2.8"; function createAXO(type) { var ax; try { ax = new ActiveXObject(type) } catch (e) { ax = null } return ax } function isChrome() { return !!(window.chrome && window.chrome.webstore && window.chrome.webstore.install) } function isSafari() { return !!/Safari/i.test(nav.userAgent) && !/Chrome/i.test(nav.userAgent) } function isFirefox() { return !!/Firefox/i.test(nav.userAgent) } function isOpera() { return !!/Opera/i.test(nav.userAgent) } function isChromium() { return !!/Chromium/i.test(nav.userAgent) } function isEdge() { return !!/Edge/i.test(nav.userAgent) } function isIOS() { return !!/iPhone|iPad|iPod/i.test(nav.platform) } function isMobile() { return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(nav.userAgent) } function isIEVersionBelow(version) { return !!(isIE && isIE && av < version) } function iOSversion() { if (/iP(hone|od|ad)/.test(navigator.platform)) { var v = navigator.appVersion.match(/OS ([\d_]+)/); return v && v[1] ? parseInt(v[1].split("_")[0], 10) : 0 } return 999 } function buildFragmentString(pdfParams) { let string = "", prop; if (pdfParams) { for (prop in pdfParams) { if (pdfParams.hasOwnProperty(prop)) { string += encodeURIComponent(prop) + "=" + encodeURIComponent(pdfParams[prop]) + "&" } } if (string) { string = "#" + string; string = string.slice(0, string.length - 1) } } return string } function log(msg) { if (typeof console !== "undefined" && console.log) { console.log("[PDFObject] " + msg) } } function embedError(msg) { log(msg); return !1 } function getTargetElement(targetSelector) { let targetNode = document.body; if (typeof targetSelector === "string") { targetNode = document.querySelector(targetSelector) } else if ((typeof jQuery !== "undefined" && targetSelector instanceof jQuery) || (typeof targetSelector.length === "number" && targetSelector.length > 0)) { targetNode = targetSelector.length ? targetSelector[0] : targetSelector } else if (typeof targetSelector.nodeType !== "undefined" && targetSelector.nodeType === 1) { targetNode = targetSelector } return targetNode } function generatePDFJSMarkup(targetNode, url, pdfOpenFragment, PDFJS_URL, id, title, omitInlineStyles, style) { style = style || "width: 100%; height: 100%;"; let querystring = url.indexOf("?") !== -1 ? "?" : ""; let encodedPDFUrl = encodeURIComponent(url + querystring + pdfOpenFragment), fullURL = PDFJS_URL + "?file=" + encodedPDFUrl, div = document.createElement("div"), iframe = document.createElement("iframe"); iframe.id = id; iframe.title = title || "PDF"; iframe.src = fullURL; iframe.className = "pdfobject"; iframe.type = "application/pdf"; iframe.frameborder = "0"; if (omitInlineStyles) { if (style) { iframe.style.cssText = style } } else { iframe.style.cssText = "border: none;" + style } div.className = "pdfobject-container"; div.appendChild(iframe); targetNode.className += " pdfobject-container"; targetNode.appendChild(div); return targetNode.getElementsByClassName("pdfobject")[0] } function generateIframeMarkup(targetNode, url, pdfOpenFragment, id, title, omitInlineStyles, style) { style = style || "width: 100%; height: 100%;"; let div = document.createElement("div"), iframe = document.createElement("iframe"); iframe.id = id; iframe.title = title || "PDF"; iframe.src = url + pdfOpenFragment; if (omitInlineStyles) { if (style) { iframe.style.cssText = style } } else { iframe.style.cssText = "border: none;" + style } div.className = "pdfobject-container"; div.appendChild(iframe); targetNode.className += " pdfobject-container"; targetNode.appendChild(div); return targetNode.getElementsByTagName("iframe")[0] } function generateEmbedMarkup(targetNode, url, pdfOpenFragment, id, title, omitInlineStyles, style) { style = style || "width: 100%; height: 100%;"; let div = document.createElement("div"), embed = document.createElement("embed"); embed.id = id; embed.title = title || "PDF"; embed.src = url + pdfOpenFragment; embed.className = "pdfobject"; embed.type = "application/pdf"; if (omitInlineStyles) { if (style) { embed.style.cssText = style } } else { embed.style.cssText = "border: none;" + style } div.className = "pdfobject-container"; div.appendChild(embed); targetNode.className += " pdfobject-container"; targetNode.appendChild(div); return targetNode.getElementsByTagName("embed")[0] } function embed(url, targetSelector, options) { if (typeof url !== "string") { return embedError("URL is not valid") } targetSelector = typeof targetSelector !== "undefined" ? targetSelector : !1; options = typeof options !== "undefined" ? options : {}; let id = options.id && typeof options.id === "string" ? "pdfobject_" + options.id : ("pdfobject_" + Math.floor(Math.random() * 10000000000000000)), edge = isEdge(), pdfOpenFragment = "", targetNode = getTargetElement(targetSelector); let forcePDFJS = !(!options.forceIframe && !options.forcePDFJS), url_parts = url.split("#"), hash = url_parts.length >= 2 ? url_parts[1] : {}, url_with_hash = url; if (targetNode) { if (targetNode.nodeName && targetNode.nodeName.toUpperCase() !== "BODY" && options.pdfOpenParams && options.pdfOpenParams.view) { pdfOpenFragment = buildFragmentString(options.pdfOpenParams) } if (targetNode) { if (!forcePDFJS && (supportsPdfMimeType || supportsPDFs)) { return generateEmbedMarkup(targetNode, url, pdfOpenFragment, id, options.title || "Embedded PDF", options.omitInlineStyles || !1, options.style || !1) } else { let fullURL = options.PDFJS_URL || !1, targetNode = getTargetElement(targetSelector); if (targetSelector && targetNode) { if (options.pdfOpenParams && options.pdfOpenParams.view) { pdfOpenFragment = buildFragmentString(options.pdfOpenParams) } if (fullURL) { return generatePDFJSMarkup(targetNode, url, pdfOpenFragment, fullURL, id, options.title || "Embedded PDF", options.omitInlineStyles, options.style) } return generateIframeMarkup(targetNode, url, pdfOpenFragment, id, options.title || "Embedded PDF", options.omitInlineStyles, options.style) } } } } else { return embedError("Target element cannot be determined") } }; function pdfobjectversion() { return pdfobjectversion }; return { embed: function (a, b, c) { return embed(a, b, c) }, pdfobjectversion: function () { return pdfobjectversion } } }()); 